{"version":3,"file":"contentBlock.actions.js","sourceRoot":"","sources":["contentBlock.actions.ts"],"names":[],"mappings":"AAAA;;;;;;;;;GASG;AACH,CAAC;IAEG,IAAI,GAAG,GAAG,KAAK,CAAC,aAAa,CAAC;IAE9B,gEAAgE;IAChE,GAAG,CAAC,YAAY,GAAG,UAAU,GAAG,EAAE,GAAG,EAAE,MAAM;QACzC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC;YAClB,GAAG,EAAE,GAAG;YACR,MAAM,EAAE,MAAM;SACjB,CAAC,CAAC,IAAI,CAAC,cAAc,GAAG,CAAC,qBAAqB,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC7D,CAAC,CAAC;IAEF;;;;;OAKG;IACH,GAAG,CAAC,cAAc,GAAG,UAAS,GAAG,EAAE,SAAS;QACxC,MAAM,CAAC,GAAG,CAAC,YAAY,CAAC,GAAG,EAAE,4BAA4B,EAAE,EAAE,SAAS,EAAE,SAAS,EAAE,CAAC,CAAC;IACzF,CAAC,CAAC;IAEF;;;;;;OAMG;IACH,GAAG,CAAC,WAAW,GAAG,UAAS,GAAG,EAAE,SAAS,EAAE,QAAQ;QAC/C,MAAM,CAAC,GAAG,CAAC,YAAY,CAAC,GAAG,EAAE,yBAAyB,EAClD,EAAE,SAAS,EAAE,SAAS,EAAE,oBAAoB,EAAE,QAAQ,EAAE,CAAC,CAAC;IAClE,CAAC,CAAC;IAEF;;;;;OAKG;IACH,GAAG,CAAC,OAAO,GAAG,UAAS,GAAG,EAAE,SAAS;QACjC,MAAM,CAAC,GAAG,CAAC,YAAY,CAAC,GAAG,EAAE,qBAAqB,EAAE,EAAE,SAAS,EAAE,SAAS,EAAE,CAAC,CAAC;IAClF,CAAC,CAAC;IAEF;;;;;;OAMG;IACH,GAAG,CAAC,OAAO,GAAG,UAAS,GAAG,EAAE,IAAI,EAAE,SAAS;QACvC,MAAM,CAAC,GAAG,CAAC,YAAY,CAAC,GAAG,EAAE,qBAAqB,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,SAAS,EAAE,SAAS,EAAE,CAAC,CAAC;IAC9F,CAAC,CAAC;IAEF;;;;;OAKG;IACH,GAAG,CAAC,SAAS,GAAG,UAAS,GAAG,EAAE,QAAQ;QAClC,MAAM,CAAC,GAAG,CAAC,YAAY,CAAC,GAAG,EAAE,qBAAqB,EAAE,EAAE,EAAE,EAAE,QAAQ,EAAE,CAAC,CAAC;IAC1E,CAAC,CAAC;AAGN,CAAC,CAAC,EAAE,CAAC","sourcesContent":["/* \r\n * this is a content block in the browser\r\n * \r\n * A Content Block is a standalone unit of content, with it's own definition of\r\n * 1. content items\r\n * 2. template\r\n * + some other stuff\r\n *\r\n * it should be able to render itself\r\n */\r\n(function () {\r\n\r\n    var cbm = $2sxc._contentBlock;\r\n\r\n    // internal helper, to do something and reload the content block\r\n    cbm.getAndReload = function (sxc, url, params) {\r\n        return sxc.webApi.get({\r\n            url: url,\r\n            params: params\r\n        }).then(function () { cbm.reloadAndReInitialize(sxc); });\r\n    };\r\n\r\n    /**\r\n     * remove an item from a list, then reload\r\n     * @param {} sxc \r\n     * @param {} sortOrder \r\n     * @returns {} \r\n     */\r\n    cbm.removeFromList = function(sxc, sortOrder) {\r\n        return cbm.getAndReload(sxc, \"view/module/removefromlist\", { sortOrder: sortOrder });\r\n    };\r\n\r\n    /**\r\n     * change the order of an item in a list, then reload\r\n     * @param {} sxc \r\n     * @param {} initOrder \r\n     * @param {} newOrder \r\n     * @returns {} \r\n     */\r\n    cbm.changeOrder = function(sxc, initOrder, newOrder) {\r\n        return cbm.getAndReload(sxc, \"view/module/changeorder\",\r\n            { sortOrder: initOrder, destinationSortOrder: newOrder });\r\n    };\r\n\r\n    /**\r\n     * add an item to the list at this position\r\n     * @param {} sxc \r\n     * @param {} sortOrder \r\n     * @returns {} \r\n     */\r\n    cbm.addItem = function(sxc, sortOrder) {\r\n        return cbm.getAndReload(sxc, \"view/module/additem\", { sortOrder: sortOrder });\r\n    };\r\n\r\n    /**\r\n     * set a content-item in this block to published, then reload\r\n     * @param {} sxc \r\n     * @param {} part \r\n     * @param {} sortOrder \r\n     * @returns {} \r\n     */\r\n    cbm.publish = function(sxc, part, sortOrder) {\r\n        return cbm.getAndReload(sxc, \"view/module/publish\", { part: part, sortOrder: sortOrder });\r\n    };\r\n\r\n    /**\r\n     * publish an item using it's ID\r\n     * @param {} sxc \r\n     * @param {} entityId \r\n     * @returns {} \r\n     */\r\n    cbm.publishId = function(sxc, entityId) {\r\n        return cbm.getAndReload(sxc, \"view/module/publish\", { id: entityId });\r\n    };\r\n\r\n\r\n})();"]}