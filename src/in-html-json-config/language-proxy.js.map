{"version":3,"file":"language-proxy.js","sourceRoot":"","sources":["language-proxy.ts"],"names":[],"mappings":";;AAAA,2CAAwG;AACxG,uCAAsC;AAEtC;;GAEG;AACH;IAAA;IA6BA,CAAC;IA5Be,mBAAK,GAAnB,UAAoB,IAAY;QAC9B,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;IAChD,CAAC;IAEa,oBAAM,GAApB,UAAqB,IAAS,EAAE,KAAsB;QAAtB,sBAAA,EAAA,cAAsB;QACpD,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;YACX,KAAK,GAAG,MAAM,CAAC;QACjB,CAAC;QAED,sBAAS,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;QAEvB,wBAAW,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,EAAE,KAAK,GAAG,UAAU,CAAC,CAAC;QACrD,wBAAW,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,EAAE,KAAK,GAAG,UAAU,CAAC,CAAC;QACrD,uBAAU,CAAC,IAAI,CAAC,GAAG,EAAE,KAAK,GAAG,MAAM,CAAC,CAAC;QACrC,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;YACb,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;gBACzC,sBAAS,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,KAAK,GAAG,MAAM,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC;gBACvD,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,SAAS,CAAC,CAAC,CAAC;oBAC9B,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;gBACrB,CAAC;YACH,CAAC;QACH,CAAC;QACD,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,KAAK,SAAS,CAAC,CAAC,CAAC;YAC3B,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC;QAClB,CAAC;QAED,MAAM,CAAC,IAAI,mBAAQ,CAAC,IAAI,CAAC,CAAC;IAC5B,CAAC;IACH,oBAAC;AAAD,CAAC,AA7BD,IA6BC;AA7BY,sCAAa","sourcesContent":["import { checkData, checkArray, checkNumber, checkBoolean, checkString, checkNull } from './ihj-helper';\r\nimport { Language } from './language';\r\n\r\n/**\r\n * proxy create Language object from JSON\r\n */\r\nexport class LanguageProxy {\r\n  public static Parse(data: string): Language {\r\n    return LanguageProxy.Create(JSON.parse(data));\r\n  }\r\n\r\n  public static Create(data: any, field: string = 'root'): Language {\r\n    if (!field) {\r\n      field = \"root\";\r\n    }\r\n\r\n    checkData(data, field);\r\n\r\n    checkString(data.Current, false, field + \".Current\");\r\n    checkString(data.Primary, false, field + \".Primary\");\r\n    checkArray(data.All, field + \".All\");\r\n    if (data.All) {\r\n      for (let i = 0; i < data.All.length; i++) {\r\n        checkNull(data.All[i], field + \".All\" + \"[\" + i + \"]\");\r\n        if (data.All[i] === undefined) {\r\n          data.All[i] = null;\r\n        }\r\n      }\r\n    }\r\n    if (data.All === undefined) {\r\n      data.All = null;\r\n    }\r\n\r\n    return new Language(data);\r\n  }\r\n}"]}