{"version":3,"file":"toolbarManager.helpers.js","sourceRoot":"","sources":["toolbarManager.helpers.ts"],"names":[],"mappings":"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","sourcesContent":["// the toolbar manager is an internal helper\r\n// taking care of toolbars, buttons etc.\r\n(function () {\r\n\r\n    // ToDo: refactor to avoid side-effects\r\n    var tools = $2sxc._toolbarManager.buttonHelpers = {\r\n\r\n        defaultSettings: {\r\n            autoAddMore: null,     // null | \"right\" | \"start\" | true\r\n            hover: \"right\",         // right | left | none\r\n            show: \"hover\",          // always | hover\r\n            // order or reverse, still thinking about this --> order: \"default\"    // default | reverse\r\n        },\r\n\r\n        // take any common input format and convert it to a full toolbar-structure definition\r\n        // can handle the following input formats (the param unstructuredConfig):\r\n        // complete tree (detected by \"groups): { groups: [ {}, {}], name: ..., defaults: {...} } \r\n        // group of buttons (detected by \"buttons): { buttons: \"...\" | [], name: ..., ... }\r\n        // list of buttons (detected by IsArray with action): [ { action: \"...\" | []}, { action: \"\"|[]} ]\r\n        // button (detected by \"command\"): { command: \"\"|[], icon: \"..\", ... }\r\n        // just a command (detected by \"action\"): { entityId: 17, action: \"edit\" }\r\n        // array of commands: [{entityId: 17, action: \"edit\"}, {contentType: \"blog\", action: \"new\"}]\r\n        buildFullDefinition: function (unstructuredConfig, allActions, instanceConfig, moreSettings) {\r\n            var fullConfig = tools.ensureDefinitionTree(unstructuredConfig, moreSettings);\r\n\r\n            // ToDo: don't use console.log in production\r\n            if (unstructuredConfig.debug) console.log(\"toolbar: detailed debug on; start build full Def\");\r\n            tools.expandButtonGroups(fullConfig, allActions);\r\n            tools.removeDisableButtons(fullConfig, instanceConfig);\r\n            if (fullConfig.debug) console.log(\"after remove: \", fullConfig);\r\n\r\n            tools.customize(fullConfig);\r\n\r\n            return fullConfig;\r\n        },\r\n\r\n        //#region build initial toolbar object\r\n        // this will take an input which could already be a tree, but it could also be a \r\n        // button-definition, or just a string, and make sure that afterwards it's a tree with groups\r\n        // the groups could still be in compact form, or already expanded, dependending on the input\r\n        // output is object with:\r\n        // - groups containing buttons[], but buttons could still be very flat\r\n        // - defaults, already officially formatted\r\n        // - params, officially formatted \r\n        ensureDefinitionTree: function (original, moreSettings) {\r\n            // original is null/undefined, just return empty set\r\n            if (!original) throw (\"preparing toolbar, with nothing to work on: \" + original);\r\n\r\n            // ensure that if it's just actions or buttons, they are then processed as arrays with 1 entry\r\n            if (!Array.isArray(original) && (original.action || original.buttons)) original = [original];\r\n\r\n            // ensure that arrays of actions or buttons are re-mapped to the right structure node\r\n            if (Array.isArray(original) && original.length) {\r\n                // an array of items having buttons, so it must be button-groups\r\n                if (original[0].buttons)\r\n                    original.groups = original; // move \"down\"\r\n\r\n                // array of items having an action, so these are buttons\r\n                else if (original[0].command || original[0].action)\r\n                    original = { groups: [{ buttons: original }] };\r\n                else\r\n                    console.warn(\"toolbar tried to build toolbar but couldn't detect type of this:\", original);\r\n            }\r\n\r\n            // build an object with this structure\r\n            return {\r\n                name: original.name || \"toolbar\", // name, no real use\r\n                debug: original.debug || false, // show more debug info\r\n                groups: original.groups || [], // the groups of buttons\r\n                defaults: original.defaults || {}, // the button defaults like icon, etc.\r\n                params: original.params || {}, // these are the default command parameters\r\n                settings: $2sxc._lib.extend({}, tools.defaultSettings, original.settings, moreSettings)\r\n            };\r\n        },\r\n        //#endregion inital toolbar object\r\n\r\n        // this will traverse a groups-tree and expand each group\r\n        // so if groups were just strings like \"edit,new\" or compact buttons, they will be expanded afterwards\r\n        expandButtonGroups: function (fullSet, actions) { //, itemSettings) {\r\n            // by now we should have a structure, let's check/fix the buttons\r\n            for (var g = 0; g < fullSet.groups.length; g++) {\r\n                // expand a verb-list like \"edit,new\" into objects like [{ action: \"edit\" }, {action: \"new\"}]\r\n                tools.expandButtonList(fullSet.groups[g], fullSet.settings);\r\n\r\n                // fix all the buttons\r\n                var btns = fullSet.groups[g].buttons;\r\n                if (Array.isArray(btns))\r\n                    for (var b = 0; b < btns.length; b++) {\r\n                        var btn = btns[b];\r\n                        if (!(actions[btn.command.action]))\r\n                            console.warn(\"warning: toolbar-button with unknown action-name:\", btn.command.action);\r\n                        $2sxc._lib.extend(btn.command, fullSet.params); // enhance the button with settings for this instance\r\n                        // tools.addCommandParams(fullSet, btn);\r\n                        tools.addDefaultBtnSettings(btn, fullSet.groups[g], fullSet, actions);      // ensure all buttons have either own settings, or the fallbacks\r\n                    }\r\n            }\r\n        },\r\n\r\n        // take a list of buttons (objects OR strings)\r\n        // and convert to proper array of buttons with actions\r\n        // on the in is a object with buttons, which are either:\r\n        // - a string like \"edit\" or multi-value \"layout,more\"\r\n        // - an array of such strings incl. optional complex objects which are\r\n        expandButtonList: function (root, settings) {\r\n            // var root = grp; // the root object which has all params of the command\r\n            var btns = [], sharedProperties = null;\r\n\r\n            // convert compact buttons (with multi-verb action objects) into own button-objects\r\n            // important because an older syntax allowed {action: \"new,edit\", entityId: 17}\r\n            if (Array.isArray(root.buttons)) {\r\n                for (var b = 0; b < root.buttons.length; b++) {\r\n                    var btn = root.buttons[b];\r\n                    if (typeof btn.action === \"string\" && btn.action.indexOf(\",\") > -1) { // if btns. is neither array nor string, it's a short-hand with action names\r\n                        var acts = btn.action.split(\",\");\r\n                        for (var a = 0; a < acts.length; a++) {\r\n                            btns.push($.extend(true, {}, btn, { action: acts[a] }));\r\n                        }\r\n                    } else\r\n                        btns.push(btn);\r\n                }\r\n            } else if (typeof root.buttons === \"string\") {\r\n                btns = root.buttons.split(\",\");\r\n                sharedProperties = $.extend({}, root); // inherit all fields used in the button\r\n                delete sharedProperties.buttons; // this one's not needed\r\n                delete sharedProperties.name; // this one's not needed\r\n                delete sharedProperties.action; //\r\n            } else {\r\n                btns = root.buttons;\r\n            }\r\n\r\n            // optionally add a more-button in each group\r\n            if (settings.autoAddMore) {\r\n                if (settings.autoAddMore === \"right\")\r\n                    btns.push(\"more\");\r\n                else {\r\n                    btns.unshift(\"more\");\r\n                }\r\n            }\r\n\r\n            // add each button - check if it's already an object or just the string\r\n            for (var v = 0; v < btns.length; v++) {\r\n                btns[v] = tools.expandButtonConfig(btns[v], sharedProperties);\r\n                // todo: refactor this out, not needed any more as they are all together now\r\n                // btns[v].group = root;// grp;    // attach group reference, needed for fallback etc.\r\n            }\r\n            root.buttons = btns; // ensure the internal def is also an array now\r\n        },\r\n\r\n        // takes an object like \"actionname\" or { action: \"actionname\", ... } and changes it to a { command: { action: \"actionname\" }, ... }\r\n        expandButtonConfig: function (original, sharedProps) {\r\n            // prevent multiple inits\r\n            if (original._expanded || original.command)\r\n                return original;\r\n\r\n            // if just a name, turn into a command\r\n            if (typeof original === \"string\")\r\n                original = { action: original };\r\n\r\n            // if it's a command w/action, wrap into command + trim\r\n            if (typeof original.action === \"string\") {\r\n                original.action = original.action.trim();\r\n                original = { command: original };\r\n            }\r\n            // some clean-up\r\n            delete original.action;  // remove the action property\r\n            original._expanded = true;\r\n            return original;\r\n        },\r\n\r\n        // remove buttons which are not valid based on add condition\r\n        removeDisableButtons: function (full, config) {\r\n            var btnGroups = full.groups;\r\n            for (var g = 0; g < btnGroups.length; g++) {\r\n                var btns = btnGroups[g].buttons;\r\n                removeUnfitButtons(btns, config);\r\n                disableButtons(btns, config);\r\n\r\n                // remove the group, if no buttons left, or only \"more\"\r\n                if (btns.length === 0 || (btns.length === 1 && btns[0].command.action === \"more\"))\r\n                    btnGroups.splice(g--, 1);   // remove, and decrement counter\r\n            }\r\n\r\n            function removeUnfitButtons(btns, config) {\r\n                for (var i = 0; i < btns.length; i++) {\r\n                    //var add = btns[i].showCondition;\r\n                    //if (add !== undefined)\r\n                    //    if (typeof (add) === \"function\" ? !add(btns[i].command, config) : !add)\r\n                    if (!tools.evalPropOrFunction(btns[i].showCondition, btns[i].command, config, true))\r\n                        btns.splice(i--, 1);\r\n                }\r\n            }\r\n\r\n            function disableButtons(btns, config) {\r\n                for (var i = 0; i < btns.length; i++) \r\n                    btns[i].disabled = tools.evalPropOrFunction(btns[i].disabled, btns[i].command, config, false);\r\n            }\r\n\r\n        },\r\n\r\n        btnProperties: [\r\n            \"classes\",\r\n            \"icon\",\r\n            \"title\",\r\n            \"dynamicClasses\",\r\n            \"showCondition\",\r\n            \"disabled\"\r\n        ],\r\n        prvProperties: [\r\n            \"defaults\",\r\n            \"params\",\r\n            \"name\"\r\n        ],\r\n\r\n        // enhance button-object with default icons, etc.\r\n        addDefaultBtnSettings: function (btn, group, groups, actions) {\r\n            for (var d = 0; d < tools.btnProperties.length; d++)\r\n                fallbackBtnSetting(btn, actions, tools.btnProperties[d]);\r\n\r\n            // configure missing button properties with various fallback options\r\n            function fallbackBtnSetting(btn, actions, propName) {\r\n                btn[propName] = btn[propName]   // by if already defined, use the already defined propery\r\n                    || (group.defaults && group.defaults[propName])     // if the group has defaults, try use use that property\r\n                    || (groups && groups.defaults && groups.defaults[propName])     // if the group has defaults, try use use that property\r\n                    || (actions[btn.command.action] && actions[btn.command.action][propName]); // if there is an action, try to use that property name\r\n            }\r\n        },\r\n\r\n        customize: function (toolbar) {\r\n            //if (!toolbar.settings) return;\r\n            //var set = toolbar.settings;\r\n            //if (set.autoAddMore) {\r\n            //    console.log(\"auto-more\");\r\n            //    var grps = toolbar.groups;\r\n            //    for (var g = 0; g < grps.length; g++) {\r\n            //        var btns = grps[g];\r\n            //        for (var i = 0; i < btns.length; i++) {\r\n            //        }\r\n            //    }\r\n            //}\r\n        },\r\n\r\n        evalPropOrFunction: function(propOrFunction, settings, config, fallback) {\r\n            if (propOrFunction === undefined || propOrFunction === null)\r\n                return fallback;\r\n            return typeof (propOrFunction) === \"function\" ? propOrFunction(settings, config) : propOrFunction;\r\n        }\r\n    };\r\n\r\n})();"]}