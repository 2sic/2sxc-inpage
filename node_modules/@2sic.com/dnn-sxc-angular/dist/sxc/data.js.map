{"version":3,"file":"data.js","sourceRoot":"","sources":["../../src/sxc/data.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,GAAG,EAAE,MAAM,OAAO,CAAC;AAC5B,OAAO,EAAE,OAAO,EAAE,MAAM,WAAW,CAAC;AACpC,OAAO,EAAE,UAAU,EAAE,MAAM,sBAAsB,CAAC;AAElD,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAE3C,OAAO,EAAE,KAAK,EAAE,MAAM,SAAS,CAAC;;;;;;;IAS9B,cACU,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;KACrB;IAEL;;;;;OAKG;;;;;;;IACI,sBAAO;;;;;;IAAd,UAAkB,WAAmB;QACnC,MAAM,CAAC,IAAI,OAAO,CAAI,IAAI,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;KAC/C;IASD,uBAAQ,GAAR,UAAY,WAAmB,EAAE,EAAiB;QAAjB,mBAAA,EAAA,SAAiB;QAChD,MAAM,CAAC,IAAI,OAAO,CAAI,IAAI,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;KACvD;IAED;;;;;OAKG;;;;;;;IACI,oBAAK;;;;;;IAAZ,UAAgB,IAAY;QAC1B,MAAM,CAAC,IAAI,KAAK,CAAI,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;KACtC;IAED;;;;;OAKG;;;;;;;IACI,qBAAM;;;;;;IAAb,UAAiB,IAAY,EAAE,MAAmB;QAChD,MAAM,CAAC,IAAI,KAAK,CAAI,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;KAClD;IAID;;;;;OAKG;;;;;;;IACI,kBAAG;;;;;;IAAV,UAAc,UAAkB;QAC9B,MAAM,CAAC,IAAI,GAAG,CAAI,IAAI,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;KAC1C;IAED;;;;;OAKG;;;;;;;IACI,mBAAI;;;;;;IAAX,UAAe,IAAY,EAAE,MAAmB;QAC9C,MAAM,CAAC,IAAI,GAAG,CAAI,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,GAAG,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;KACtD;;gBAnEF,UAAU;;;;gBAXF,UAAU;;eAFnB;;SAca,IAAI","sourcesContent":["import { Api } from './api';\r\nimport { Content } from './content';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { HttpParams } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs/Rx';\r\nimport { Query } from './query';\r\n\r\n/**\r\n * 2sxc data provider\r\n * gives you access to content and query streams using the content$ and query$ commands\r\n * you can also use the content and query managers, but these are currently not so useful\r\n */\r\n@Injectable()\r\nexport class Data {\r\n  constructor(\r\n    private http: HttpClient,\r\n  ) { }\r\n\r\n  /**\r\n   * get a content manager object\r\n   * usually you will prefer the the observable stream content$\r\n   * this manager is currently included for consistency, and will later also offer write commands\r\n   * @param contentType name of the content-type\r\n   */\r\n  public content<T>(contentType: string): Content<T> {\r\n    return new Content<T>(this.http, contentType);\r\n  }\r\n\r\n  /**\r\n   * get a stream of content items or (if ID is provided) a stream containing one item\r\n   * @param contentType name of the content-type\r\n   * @param id optional id of a single item\r\n   */\r\n  content$<T>(contentType: string): Observable<T[]>;\r\n  content$<T>(contentType: string, id: number): Observable<T>\r\n  content$<T>(contentType: string, id: number = null): Observable<T[]> | Observable<T> {\r\n    return new Content<T>(this.http, contentType).get(id);\r\n  }\r\n\r\n  /**\r\n   * get a query object to then start queries\r\n   * usually you'll be better off using the observable stream query$, this is included primarily for consistency in the api\r\n   * @param name the query name\r\n   * @returns a query object with a .get()\r\n   */\r\n  public query<T>(name: string) {\r\n    return new Query<T>(this.http, name);\r\n  }\r\n\r\n  /**\r\n   * retrieve a query stream from the server\r\n   * @param name the query name\r\n   * @param params optional parameters-object\r\n   * @returns a typed observable which will give you the query\r\n   */\r\n  public query$<T>(name: string, params?: HttpParams): Observable<T> {\r\n    return new Query<T>(this.http, name).get(params);\r\n  }\r\n\r\n\r\n  \r\n  /**\r\n   * get an api object to then start api-calls\r\n   * usually you'll be better off using the observable stream api$, this is included primarily for consistency in the api\r\n   * @param controller the api controller\r\n   * @returns a query object with a .get()\r\n   */\r\n  public api<T>(controller: string): Api<T> {\r\n    return new Api<T>(this.http, controller);\r\n  }\r\n\r\n  /**\r\n   * retrieve a api stream from the server\r\n   * @param name the method name\r\n   * @param params optional parameters-object\r\n   * @returns a typed observable which will give you the query\r\n   */\r\n  public api$<T>(name: string, params?: HttpParams): Observable<T> {\r\n    return new Api<T>(this.http, name).get(name, params);\r\n  }\r\n  \r\n}\r\n"]}