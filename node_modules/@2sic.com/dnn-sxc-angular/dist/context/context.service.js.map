{"version":3,"file":"context.service.js","sourceRoot":"","sources":["../../src/context/context.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { ContextInfo } from './context-info';\r\nimport { DevContext as DevContext } from './dev-context';\r\nimport { ElementRef, Injectable, Optional } from '@angular/core';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { ReplaySubject } from 'rxjs/ReplaySubject';\r\nimport { SxcInstance } from '../interfaces/sxc-instance';\r\nimport 'rxjs/add/observable/combineLatest';\r\nimport 'rxjs/add/observable/timer';\r\nimport 'rxjs/Rx';\r\n\r\ndeclare const window: any;\r\n\r\n@Injectable()\r\nexport class Context {\r\n    private globSxc: SxcController;\r\n    // todo: probably should set the replay-buffer to 1 for all the following, but must test!\r\n    private midSubject = new ReplaySubject<number>(1);\r\n    private tidSubject = new ReplaySubject<number>(1);\r\n    private cbIdSubject = new ReplaySubject<number>(1);\r\n    private afTokenSubject = new ReplaySubject<string>(1);\r\n    private sxcSubject = new ReplaySubject<SxcInstance>(1);\r\n\r\n    moduleId$ = this.midSubject.asObservable();\r\n    tabId$ = this.tidSubject.asObservable();\r\n    contentBlockId$ = this.cbIdSubject.asObservable();\r\n    antiForgeryToken$ = this.afTokenSubject.asObservable();\r\n    sxc$ = this.sxcSubject.asObservable();\r\n    sxcController$: Observable<SxcController>;\r\n\r\n    all$ = Observable.combineLatest(\r\n        this.moduleId$,             // wait for module id\r\n        this.tabId$,                // wait for tabId\r\n        this.contentBlockId$,       // wait for content-block id\r\n        this.sxc$,                  // wait for sxc instance\r\n        this.antiForgeryToken$)     // wait for security token\r\n        .map(res => <ContextInfo>{  // then merge streams\r\n            moduleId: res[0],\r\n            tabId: res[1],\r\n            contentBlockId: res[2],\r\n            sxc: res[3],\r\n            antiForgeryToken: res[4]\r\n        });\r\n\r\n    constructor(\r\n        @Optional() private devSettings: DevContext\r\n    ) {\r\n\r\n        // Dev settings with minimal ignore settings.\r\n        this.devSettings = Object.assign({}, {\r\n            ignoreMissing$2sxc: false,\r\n            ignoreMissingServicesFramework: false\r\n        }, devSettings);\r\n\r\n        this.globSxc = <SxcController>window.$2sxc;\r\n        if (this.globSxc === undefined && !devSettings.ignoreMissing$2sxc) {\r\n            throw new Error('window.$2sxc is null - you probably forgot to include the script before loading angular');\r\n        }\r\n        \r\n        this.sxcController$ = Observable.from(this.globSxc as any); // must cast to any, otherwise I get strange typscript errors :(\r\n    }\r\n\r\n    /**\r\n     * Configure 2sxc in the context of a HTMLNode.\r\n     * @param htmlNode the HTMLNode\r\n     */\r\n    autoConfigure(htmlNode: ElementRef) {\r\n\r\n        // No global $2sxc found - and no error was raised at the constructor\r\n        if (!this.globSxc) {\r\n            // just provide dev/debug settings\r\n            this.midSubject.next(this.devSettings.moduleId);\r\n            this.tidSubject.next(this.devSettings.tabId);\r\n            this.cbIdSubject.next(0);\r\n            return;\r\n        }\r\n\r\n        const sxc = <SxcInstance>this.globSxc(htmlNode.nativeElement);\r\n        if (sxc === undefined || sxc === null) {\r\n            throw new Error('couldn\\'t get sxc instance - reason unknown');\r\n        }\r\n\r\n        // Update / publish moduleId.\r\n        this.midSubject.next(sxc.id);\r\n        this.cbIdSubject.next(sxc.cbid);\r\n        this.sxcSubject.next(sxc);\r\n\r\n        // Check if DNN Services framework exists.\r\n        if (window.$ && window.$.ServicesFramework) {\r\n \r\n            // Run timer till sf is ready, but max for a second.\r\n            const timer = Observable.timer(0, 100)\r\n                .take(10)\r\n                .subscribe(x => {\r\n\r\n                    // This must be accessed after a delay, as the SF is not ready yet.\r\n                    const sf = window.$.ServicesFramework(/* this.sxcInstance */ sxc.id);\r\n\r\n                    // Check if sf is initialized.\r\n                    if (sf.getAntiForgeryValue() && sf.getTabId() !== -1) {\r\n                        timer.unsubscribe();\r\n\r\n                        this.tidSubject.next(sf.getTabId());\r\n                        this.afTokenSubject.next(sf.getAntiForgeryValue());\r\n                    } else {\r\n                        // Must reset, as they are incorrectly initialized when accessed early.\r\n                        if (window.dnn && window.dnn.vars && window.dnn.vars.length === 0) {\r\n                            window.dnn.vars = null;\r\n                        }\r\n                    }\r\n                });\r\n            return;\r\n        }\r\n\r\n        if (!this.devSettings.ignoreMissingServicesFramework) {\r\n            throw new Error(`\r\n                DNN Services Framework is missing, and it\\'s not allowed according to devSettings.\r\n                Either set devSettings to ignore this, or ensure it\\'s there`);\r\n        }\r\n\r\n        this.tidSubject.next(this.devSettings.tabId);\r\n        this.afTokenSubject.next(this.devSettings.antiForgeryToken);\r\n    }\r\n}\r\n"]}