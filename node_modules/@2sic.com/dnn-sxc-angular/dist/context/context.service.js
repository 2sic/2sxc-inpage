import { DevContext as DevContext } from './dev-context';
import { Injectable, Optional } from '@angular/core';
import { Observable } from 'rxjs/Observable';
import { ReplaySubject } from 'rxjs/ReplaySubject';
import 'rxjs/add/observable/combineLatest';
import 'rxjs/add/observable/timer';
import 'rxjs/Rx';
var Context = /** @class */ (function () {
    function Context(devSettings) {
        this.devSettings = devSettings;
        // todo: probably should set the replay-buffer to 1 for all the following, but must test!
        this.midSubject = new ReplaySubject(1);
        this.tidSubject = new ReplaySubject(1);
        this.cbIdSubject = new ReplaySubject(1);
        this.afTokenSubject = new ReplaySubject(1);
        this.sxcSubject = new ReplaySubject(1);
        this.moduleId$ = this.midSubject.asObservable();
        this.tabId$ = this.tidSubject.asObservable();
        this.contentBlockId$ = this.cbIdSubject.asObservable();
        this.antiForgeryToken$ = this.afTokenSubject.asObservable();
        this.sxc$ = this.sxcSubject.asObservable();
        this.all$ = Observable.combineLatest(this.moduleId$, // wait for module id
        // wait for module id
        this.tabId$, // wait for tabId
        // wait for tabId
        this.contentBlockId$, // wait for content-block id
        // wait for content-block id
        this.sxc$, // wait for sxc instance
        // wait for sxc instance
        this.antiForgeryToken$) // wait for security token
            .map(function (res) { return ({
            // then merge streams
            moduleId: res[0],
            tabId: res[1],
            contentBlockId: res[2],
            sxc: res[3],
            antiForgeryToken: res[4]
        }); });
        // Dev settings with minimal ignore settings.
        this.devSettings = Object.assign({}, {
            ignoreMissing$2sxc: false,
            ignoreMissingServicesFramework: false
        }, devSettings);
        this.globSxc = window.$2sxc;
        if (this.globSxc === undefined && !devSettings.ignoreMissing$2sxc) {
            throw new Error('window.$2sxc is null - you probably forgot to include the script before loading angular');
        }
        this.sxcController$ = Observable.from(this.globSxc); // must cast to any, otherwise I get strange typscript errors :(
    }
    /**
     * Configure 2sxc in the context of a HTMLNode.
     * @param htmlNode the HTMLNode
     */
    /**
         * Configure 2sxc in the context of a HTMLNode.
         * @param htmlNode the HTMLNode
         */
    Context.prototype.autoConfigure = /**
         * Configure 2sxc in the context of a HTMLNode.
         * @param htmlNode the HTMLNode
         */
    function (htmlNode) {
        var _this = this;
        // No global $2sxc found - and no error was raised at the constructor
        if (!this.globSxc) {
            // just provide dev/debug settings
            this.midSubject.next(this.devSettings.moduleId);
            this.tidSubject.next(this.devSettings.tabId);
            this.cbIdSubject.next(0);
            return;
        }
        var sxc = this.globSxc(htmlNode.nativeElement);
        if (sxc === undefined || sxc === null) {
            throw new Error('couldn\'t get sxc instance - reason unknown');
        }
        // Update / publish moduleId.
        this.midSubject.next(sxc.id);
        this.cbIdSubject.next(sxc.cbid);
        this.sxcSubject.next(sxc);
        // Check if DNN Services framework exists.
        if (window.$ && window.$.ServicesFramework) {
            // Run timer till sf is ready, but max for a second.
            var timer_1 = Observable.timer(0, 100)
                .take(10)
                .subscribe(function (x) {
                // This must be accessed after a delay, as the SF is not ready yet.
                var sf = window.$.ServicesFramework(/* this.sxcInstance */ /* this.sxcInstance */ sxc.id);
                // Check if sf is initialized.
                if (sf.getAntiForgeryValue() && sf.getTabId() !== -1) {
                    timer_1.unsubscribe();
                    _this.tidSubject.next(sf.getTabId());
                    _this.afTokenSubject.next(sf.getAntiForgeryValue());
                }
                else {
                    // Must reset, as they are incorrectly initialized when accessed early.
                    if (window.dnn && window.dnn.vars && window.dnn.vars.length === 0) {
                        window.dnn.vars = null;
                    }
                }
            });
            return;
        }
        if (!this.devSettings.ignoreMissingServicesFramework) {
            throw new Error("\n                DNN Services Framework is missing, and it's not allowed according to devSettings.\n                Either set devSettings to ignore this, or ensure it's there");
        }
        this.tidSubject.next(this.devSettings.tabId);
        this.afTokenSubject.next(this.devSettings.antiForgeryToken);
    };
    Context.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    Context.ctorParameters = function () { return [
        { type: DevContext, decorators: [{ type: Optional },] },
    ]; };
    return Context;
}());
export { Context };
//# sourceMappingURL=context.service.js.map