{"version":3,"file":"interceptor.js","sourceRoot":"","sources":["../../src/http/interceptor.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAG3C,OAAO,EAAE,OAAO,EAAE,MAAM,4BAA4B,CAAC;;IAMnD,qBACU,OAAgB;QAAhB,YAAO,GAAP,OAAO,CAAS;KACrB;IAEL,+BAAS,GAAT,UAAU,GAAqB,EAAE,IAAiB;QAChD,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;aAC7B,OAAO,CAAC,UAAA,GAAG;;YAGV,IAAM,MAAM,GAAG,GAAG,CAAC,KAAK,CAAC;gBACvB,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,iBAAiB,CAAC,GAAG,CAAC,GAAG,CAAC;gBACvC,UAAU,EAAE;oBACV,QAAQ,EAAE,GAAG,CAAC,QAAQ,CAAC,QAAQ,EAAE;oBACjC,KAAK,EAAE,GAAG,CAAC,KAAK,CAAC,QAAQ,EAAE;oBAC3B,cAAc,EAAE,GAAG,CAAC,cAAc,CAAC,QAAQ,EAAE;oBAC7C,wBAAwB,EAAE,GAAG,CAAC,gBAAgB;oBAC9C,kBAAkB,EAAE,6BAA6B;iBAClD;aACF,CAAC,CAAC;YAEH,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;SAC5B,CAAC,CAAC;KACN;;gBAxBF,UAAU;;;;gBAJF,OAAO;;sBAJhB;;SASa,WAAW","sourcesContent":["import { ContextInfo } from '../context/context-info';\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpEvent, HttpInterceptor, HttpHandler, HttpRequest } from '@angular/common/http';\r\nimport { Observable } from \"rxjs/Rx\";\r\nimport { Context } from \"../context/context.service\";\r\nimport { Subject } from 'rxjs/Subject';\r\nimport { HttpHeaders } from '@angular/common/http';\r\n\r\n@Injectable()\r\nexport class Interceptor implements HttpInterceptor {\r\n  constructor(\r\n    private context: Context\r\n  ) { }\r\n\r\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n    return this.context.all$.take(1)\r\n      .flatMap(ctx => {\r\n\r\n        // Clone the request and update the url with 2sxc params.\r\n        const newReq = req.clone({\r\n          url: ctx.sxc.resolveServiceUrl(req.url),\r\n          setHeaders: {\r\n            ModuleId: ctx.moduleId.toString(),\r\n            TabId: ctx.tabId.toString(),\r\n            ContentBlockId: ctx.contentBlockId.toString(),\r\n            RequestVerificationToken: ctx.antiForgeryToken,\r\n            'X-Debugging-Hint': 'bootstrapped by Sxc4Angular',\r\n          },\r\n        });\r\n\r\n        return next.handle(newReq);\r\n      });\r\n  }\r\n}\r\n"]}